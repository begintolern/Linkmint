generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Email verification
  emailVerifiedAt   DateTime?
  verifyToken       String?   @unique
  verifyTokenExpiry DateTime?

  referralGroupId String?
  referredById    String?
  referralBadge   String?
  referralCode    String? @unique
  role            String? @default("user")
  trustScore      Int?    @default(0)

  // Relations
  referralGroup          ReferralGroup?       @relation("UsersInGroup", fields: [referralGroupId], references: [id])
  referralGroupsCreated  ReferralGroup[]      @relation("UsersInGroupReferrer")
  referralBatches        ReferralBatch[]      @relation("UserReferralBatches")
  commissions            Commission[]
  commissionsFromInvites OverrideCommission[] @relation("InviteeOverride")
  overrideEarnings       OverrideCommission[] @relation("ReferrerOverride")
  payouts                Payout[]
  eventLogs              EventLog[]
  verificationTokens     VerificationToken[]

  // Self-referential
  referredBy User?  @relation("UserReferrals", fields: [referredById], references: [id])
  referrals  User[] @relation("UserReferrals")
}

model ReferralGroup {
  id         String   @id @default(cuid())
  referrerId String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  startedAt  DateTime @default(now())

  users    User[] @relation("UsersInGroup")
  referrer User   @relation("UsersInGroupReferrer", fields: [referrerId], references: [id])
}

model ReferralBatch {
  id         String    @id @default(cuid())
  referrerId String
  inviteeIds String[]
  startedAt  DateTime?
  expiresAt  DateTime?
  status     String    @default("pending")
  createdAt  DateTime  @default(now())

  referrer User @relation("UserReferralBatches", fields: [referrerId], references: [id])
}

// schema.prisma

// schema.prisma

model EventLog {
  id        String   @id @default(cuid())
  userId    String?                                       // allow system logs
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  type      String                                        // "commission" | "referral" | "payout" | "test" | ...
  message   String?
  detail    String?                                       // keep as String for now (you can switch to Json? later)
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  // If your actual DB table is named `eventLogs` (plural), keep this map:
  // @@map("eventLogs")
}

model Payout {
  id         String    @id @default(cuid())
  userId     String
  amount     Float
  method     String
  status     String
  details    String?
  createdAt  DateTime  @default(now())
  approvedAt DateTime?
  paidAt     DateTime?

  user User @relation(fields: [userId], references: [id])
}

model FloatLog {
  id        String   @id @default(cuid())
  amount    Float
  source    String
  note      String?
  createdAt DateTime @default(now())
}

model PendingUser {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  verifyToken       String
  verifyTokenExpiry DateTime
  referredById      String?
  createdAt         DateTime @default(now())
}

model Commission {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  type        CommissionType
  status      String
  paidOut     Boolean        @default(false)
  source      String?
  description String?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id])
}

model OverrideCommission {
  id                 String   @id @default(cuid())
  referrerId         String
  inviteeId          String
  amount             Float
  sourceCommissionId String
  reason             String   @default("Referral bonus override")
  status             String   @default("pending")
  createdAt          DateTime @default(now())

  invitee  User @relation("InviteeOverride", fields: [inviteeId], references: [id])
  referrer User @relation("ReferrerOverride", fields: [referrerId], references: [id])
}

model SystemSetting {
  key   String @id
  value String
}

model NetworkAccount {
  id        String           @id @default(uuid())
  network   AffiliateNetwork
  accountId String
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([network, accountId])
}

model MerchantRule {
  id               String         @id @default(cuid())
  active           Boolean        @default(true)
  merchantName     String
  network          String?
  domainPattern    String?
  paramKey         String?
  paramValue       String?
  linkTemplate     String?
  allowedSources   Json?
  disallowed       Json?
  cookieWindowDays Int?
  payoutDelayDays  Int?
  commissionType   CommissionCalc @default(PERCENT)
  commissionRate   Decimal?
  calc             String?
  rate             Float?
  notes            String?
  importMethod     ImportMethod   @default(MANUAL)
  apiBaseUrl       String?
  apiAuthType      String?
  apiKeyRef        String?
  lastImportedAt   DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id])
}

enum CommissionType {
  referral_purchase
  override_bonus
  payout
}

enum AffiliateNetwork {
  AMAZON
  SHAREASALE
  CJ
  IMPACT
  RAKUTEN
  OTHER
}

enum ImportMethod {
  API
  CSV
  MANUAL
}

enum CommissionCalc {
  PERCENT
  FIXED
}
