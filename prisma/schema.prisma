generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  name                   String?
  password               String?
  createdAt              DateTime             @default(now())
  referralGroupId        String?
  referredById           String?
  verifyToken            String?              @unique
  verifyTokenExpiry      DateTime?
  trustScore             Int?                 @default(0)
  referralBadge          String?
  referralCode           String?              @unique
  role                   String?              @default("user")
  emailVerifiedAt        DateTime?
  updatedAt              DateTime             @updatedAt
  ageConfirmed           Boolean              @default(false)
  ageConfirmedAt         DateTime?
  deletedAt              DateTime?
  dob                    DateTime?
  tosAcceptedAt          DateTime?
  tosAcceptedIp          String?              @db.VarChar(64)
  commissions            Commission[]
  eventLogs              EventLog[]
  commissionsFromInvites OverrideCommission[] @relation("InviteeOverride")
  overrideEarnings       OverrideCommission[] @relation("ReferrerOverride")
  passwordResetTokens    PasswordResetToken[]
  payouts                Payout[]
  payoutAccounts         PayoutAccount[]
  payoutLogs             PayoutLog[]
  pinCredentials         PinCredential[]      @relation("UserPinCredentials")
  referralBatches        ReferralBatch[]      @relation("UserReferralBatches")
  referralGroupsCreated  ReferralGroup[]      @relation("UsersInGroupReferrer")
  smartLinks             SmartLink[]          @relation("UserToSmartLink")
  referralGroup          ReferralGroup?       @relation("UsersInGroup", fields: [referralGroupId], references: [id])
  referredBy             User?                @relation("UserReferrals", fields: [referredById], references: [id])
  referrals              User[]               @relation("UserReferrals")
  verificationTokens     VerificationToken[]
  bonusCents          Int       @default(0)   // bonus balance in cents
  bonusEligibleUntil  DateTime?               // when bonus window expires (e.g., 90-day override)
  bonusTier           Int       @default(0)   // simple tier indicator (0=none, 1,2,...)

  @@index([deletedAt])
}

model ReferralGroup {
  id         String   @id @default(cuid())
  referrerId String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  startedAt  DateTime @default(now())
  referrer   User     @relation("UsersInGroupReferrer", fields: [referrerId], references: [id])
  users      User[]   @relation("UsersInGroup")
}

model ReferralBatch {
  id         String    @id @default(cuid())
  referrerId String
  inviteeIds String[]
  startedAt  DateTime?
  expiresAt  DateTime?
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  referrer   User      @relation("UserReferralBatches", fields: [referrerId], references: [id])
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  detail    String?
  message   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model PayoutAccount {
  id         String         @id @default(cuid())
  userId     String
  provider   PayoutProvider
  externalId String
  label      String?
  isDefault  Boolean        @default(false)
  status     String         @default("VERIFIED")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])

  @@unique([userId, provider, externalId])
  @@index([userId, isDefault])
}

model Payout {
  id               String          @id @default(cuid())
  userId           String
  amount           Float
  method           String
  status           String
  details          String?
  createdAt        DateTime        @default(now())
  approvedAt       DateTime?
  paidAt           DateTime?
  externalPayoutId String?
  feeCents         Int             @default(0)
  netCents         Int             @default(0)
  payoutAccountId  String?
  paypalBatchId    String?         @db.VarChar(191)
  provider         PayoutProvider?
  receiverEmail    String?         @db.VarChar(191)
  statusEnum       PayoutStatus    @default(PENDING)
  transactionId    String?         @db.VarChar(191)
  user             User            @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([userId, statusEnum])
}

model FloatLog {
  id        String   @id @default(cuid())
  amount    Float
  source    String
  note      String?
  createdAt DateTime @default(now())
}

model PendingUser {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  verifyToken       String
  verifyTokenExpiry DateTime
  referredById      String?
  createdAt         DateTime @default(now())
}

model Commission {
  id             String           @id @default(cuid())
  userId         String
  amount         Float
  type           CommissionType
  paidOut        Boolean          @default(false)
  source         String?
  description    String?
  createdAt      DateTime         @default(now())
  merchantRuleId String?
  updatedAt      DateTime         @updatedAt
  status         CommissionStatus @default(UNVERIFIED)
  merchant       MerchantRule?    @relation(fields: [merchantRuleId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@index([merchantRuleId])
  @@index([userId, status])
}

model OverrideCommission {
  id                 String   @id @default(cuid())
  referrerId         String
  inviteeId          String
  amount             Float
  sourceCommissionId String
  reason             String   @default("Referral bonus override")
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  invitee            User     @relation("InviteeOverride", fields: [inviteeId], references: [id])
  referrer           User     @relation("ReferrerOverride", fields: [referrerId], references: [id])
}

model SystemSetting {
  key   String @id
  value String
}

model NetworkAccount {
  id        String           @id @default(uuid())
  network   AffiliateNetwork
  accountId String
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([network, accountId])
}

model MerchantRule {
  id               String         @id @default(cuid())
  active           Boolean        @default(true)
  merchantName     String
  network          String?
  domainPattern    String?
  paramKey         String?
  paramValue       String?
  linkTemplate     String?
  allowedSources   Json?
  disallowed       Json?
  cookieWindowDays Int?
  payoutDelayDays  Int?
  commissionType   CommissionCalc @default(PERCENT)
  commissionRate   Decimal?
  calc             String?
  rate             Float?
  notes            String?
  importMethod     ImportMethod   @default(MANUAL)
  apiBaseUrl       String?
  apiAuthType      String?
  apiKeyRef        String?
  lastImportedAt   DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           String         @default("PENDING")
  allowedRegions   String[]
  inactiveReason   String?
  commissions      Commission[]
  smartLinks       SmartLink[]    @relation("MerchantRuleToSmartLink")
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
}

model PayoutLog {
  id            String   @id @default(cuid())
  userId        String?
  receiverEmail String?
  amount        Float?
  paypalBatchId String?
  transactionId String?
  note          String?
  status        String?
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  source    String?
  createdAt DateTime @default(now())
}

model PinCredential {
  id         String    @id @default(cuid())
  userId     String
  deviceId   String
  deviceName String?
  pinHash    String
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation("UserPinCredentials", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
}

model SmartLink {
  id             String        @id @default(cuid())
  userId         String
  merchantRuleId String?
  merchantName   String
  merchantDomain String?
  originalUrl    String
  shortUrl       String
  label          String?
  createdAt      DateTime      @default(now())
  merchantRule   MerchantRule? @relation("MerchantRuleToSmartLink", fields: [merchantRuleId], references: [id])
  user           User          @relation("UserToSmartLink", fields: [userId], references: [id])
}

model AdvertiserApplication {
  id           String   @id @default(cuid())
  advertiserId String
  name         String
  status       String
  appliedAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  commission   String?
  cookieWindow Int?
  notes        String?
}

enum PayoutProvider {
  PAYPAL
  PAYONEER
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum CommissionStatus {
  UNVERIFIED
  PENDING
  APPROVED
  PAID
}

enum CommissionType {
  referral_purchase
  override_bonus
  payout
}

enum AffiliateNetwork {
  AMAZON
  SHAREASALE
  CJ
  IMPACT
  RAKUTEN
  OTHER
}

enum ImportMethod {
  API
  CSV
  MANUAL
}

enum CommissionCalc {
  PERCENT
  FIXED
}
