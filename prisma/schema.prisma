generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?
  dob               DateTime?
  ageConfirmed      Boolean   @default(false)
  ageConfirmedAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  emailVerifiedAt   DateTime?
  verifyToken       String?   @unique
  verifyTokenExpiry DateTime?
  referralGroupId   String?
  referredById      String?
  referralBadge     String?
  referralCode      String?   @unique
  role              String?   @default("user")
  trustScore        Int?      @default(0)

  // ðŸ”¹ Soft delete flag (null = active)
  deletedAt DateTime?

  // Relations (unchanged)
  commissions            Commission[]
  eventLogs              EventLog[]
  payoutLogs             PayoutLog[]
  commissionsFromInvites OverrideCommission[] @relation("InviteeOverride")
  overrideEarnings       OverrideCommission[] @relation("ReferrerOverride")
  passwordResetTokens    PasswordResetToken[]

  // NEW: payout accounts per provider (PayPal/Payoneer)
  payoutAccounts PayoutAccount[]
  payouts        Payout[]

  referralBatches       ReferralBatch[]     @relation("UserReferralBatches")
  referralGroupsCreated ReferralGroup[]     @relation("UsersInGroupReferrer")
  referralGroup         ReferralGroup?      @relation("UsersInGroup", fields: [referralGroupId], references: [id])
  referredBy            User?               @relation("UserReferrals", fields: [referredById], references: [id])
  referrals             User[]              @relation("UserReferrals")
  verificationTokens    VerificationToken[]

  @@index([deletedAt])
}

model ReferralGroup {
  id         String   @id @default(cuid())
  referrerId String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  startedAt  DateTime @default(now())

  referrer User   @relation("UsersInGroupReferrer", fields: [referrerId], references: [id])
  users    User[] @relation("UsersInGroup")
}

model ReferralBatch {
  id         String    @id @default(cuid())
  referrerId String
  inviteeIds String[]
  startedAt  DateTime?
  expiresAt  DateTime?
  status     String    @default("pending")
  createdAt  DateTime  @default(now())

  referrer User @relation("UserReferralBatches", fields: [referrerId], references: [id])
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  detail    String?
  message   String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

// ---------- NEW enums for payout providers/status ----------
enum PayoutProvider {
  PAYPAL
  PAYONEER
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

// ---------- NEW model: payout accounts (per user & provider) ----------
model PayoutAccount {
  id         String         @id @default(cuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  provider   PayoutProvider
  externalId String // PayPal email OR Payoneer recipient ID/email
  label      String?
  isDefault  Boolean        @default(false)
  status     String         @default("VERIFIED")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, provider, externalId])
  @@index([userId, isDefault])
}

// ---------- UPDATED Payout model ----------
// Keeps your original fields for compatibility (amount/method/PayPal logs)
// Adds provider/feeCents/netCents/externalPayoutId/status for the new flow
model Payout {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Legacy fields (kept to avoid breaking existing code)
  amount     Float
  method     String // legacy; prefer `provider` going forward
  status     String // legacy textual status; prefer enum below
  details    String?
  createdAt  DateTime  @default(now())
  approvedAt DateTime?

  // PayPal logging (existing)
  paypalBatchId String?   @db.VarChar(191)
  transactionId String?   @db.VarChar(191)
  receiverEmail String?   @db.VarChar(191)
  paidAt        DateTime?

  // NEW fields for unified payout model
  provider         PayoutProvider?
  payoutAccountId  String?
  externalPayoutId String? // provider transaction id (PayPal/Payoneer/etc)
  feeCents         Int             @default(0) // provider fee charged
  netCents         Int             @default(0) // amountCents - feeCents (see note)
  statusEnum       PayoutStatus    @default(PENDING)

  @@index([userId, status])
  @@index([userId, statusEnum])
}

// NOTE: If you later want to fully migrate to integer cents, you can add:
//   amountCents Int
// and gradually deprecate `amount` (Float). For now we keep both worlds working.

model FloatLog {
  id        String   @id @default(cuid())
  amount    Float
  source    String
  note      String?
  createdAt DateTime @default(now())
}

model PendingUser {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  verifyToken       String
  verifyTokenExpiry DateTime
  referredById      String?
  createdAt         DateTime @default(now())
}

model Commission {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  type        CommissionType
  status      String
  paidOut     Boolean        @default(false)
  source      String?
  description String?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id])
}

model OverrideCommission {
  id                 String   @id @default(cuid())
  referrerId         String
  inviteeId          String
  amount             Float
  sourceCommissionId String
  reason             String   @default("Referral bonus override")
  status             String   @default("pending")
  createdAt          DateTime @default(now())

  invitee  User @relation("InviteeOverride", fields: [inviteeId], references: [id])
  referrer User @relation("ReferrerOverride", fields: [referrerId], references: [id])
}

model SystemSetting {
  key   String @id
  value String
}

model NetworkAccount {
  id        String           @id @default(uuid())
  network   AffiliateNetwork
  accountId String
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([network, accountId])
}

model MerchantRule {
  id               String         @id @default(cuid())
  active           Boolean        @default(true)
  merchantName     String
  network          String?
  domainPattern    String?
  paramKey         String?
  paramValue       String?
  linkTemplate     String?
  allowedSources   Json?
  disallowed       Json?
  cookieWindowDays Int?
  payoutDelayDays  Int?
  commissionType   CommissionCalc @default(PERCENT)
  commissionRate   Decimal?
  calc             String?
  rate             Float?
  notes            String?
  importMethod     ImportMethod   @default(MANUAL)
  apiBaseUrl       String?
  apiAuthType      String?
  apiKeyRef        String?
  lastImportedAt   DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id])
}

enum CommissionType {
  referral_purchase
  override_bonus
  payout
}

enum AffiliateNetwork {
  AMAZON
  SHAREASALE
  CJ
  IMPACT
  RAKUTEN
  OTHER
}

enum ImportMethod {
  API
  CSV
  MANUAL
}

enum CommissionCalc {
  PERCENT
  FIXED
}

model PayoutLog {
  id            String   @id @default(cuid())
  userId        String?
  receiverEmail String?
  amount        Float?
  paypalBatchId String?
  transactionId String?
  note          String?
  status        String? // e.g. "CREATED" | "PAID" | "FAILED"
  createdAt     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id])
}
